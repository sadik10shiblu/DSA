
Question: Take two singly linked lists as input and check if their sizes are same or not.

Sample Input
Sample Output
2 1 5 3 4 9 -1
1 2 3 4 5 6 -1
YES
5 1 4 5 -1
5 1 4 -1
NO

CODE:

#include<bits/stdc++.h>
using namespace std;
class Node
{
public:
    int val;
    Node* next;

    Node(int val)
    {
        this->next=NULL;
        this->val=val;
    }
};
void insert_at_tail1(Node* &head1,Node* &tail1,int val1)
{
    Node* newnode=new Node(val1);
    if(head1==NULL)
    {
        head1=newnode;
        tail1=newnode;
        return;
    }
    tail1->next=newnode;
    tail1=newnode;
}
void insert_at_tail2(Node* &head2,Node* &tail2,int val2)
{
    Node* newnode=new Node(val2);
    if(head2==NULL)
    {
        head2=newnode;
        tail2=newnode;
        return;
    }
    tail2->next=newnode;
    tail2=newnode;
}
void print_linked_list(Node *head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<endl;
        temp=temp->next;
    }
}
int get_size(Node* head)
{
    int cnt=0;
    Node* temp=head;
    while(temp!=NULL)
    {
        cnt++;
        temp=temp->next;
    }
    return cnt;//check without return
}
int main()
{
    Node* head1=NULL;
    Node* tail1=NULL;
    Node* head2=NULL;
    Node* tail2=NULL;
    int val1;
    int val2;
    while(true)
    {
        cin>>val1;
        if(val1==-1)
        {
            break;
        }
        insert_at_tail1(head1,tail1,val1);
    }
    while(true)
    {
        cin>>val2;
        if(val2==-1)
        {
            break;
        }
        insert_at_tail2(head2,tail2,val2);
    }
    print_linked_list(head1);
    print_linked_list(head2);

    int size1=get_size(head1);//putting size value into "size" function
    int size2=get_size(head2);

    cout<<"size of the list 1= "<<get_size(head1)<<endl;
    cout<<"size of the list 2= "<<get_size(head2)<<endl;
    if(size1==size2)
        cout<<"YES"<<endl;
    else
        cout<<"NO"<<endl;

    return 0;
}
