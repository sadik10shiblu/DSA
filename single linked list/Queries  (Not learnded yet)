
You have a singly linked list which is empty initially. Then you will be given Q queries. In each query you will be given two values X and V.

If X is 0 that means you will insert the value V to the head of the linked list.
If X is 1 then you will insert the value V to the tail of the linked list.
If X is 2 then you will delete the value Vth index of the linked list. Assume that index starts from 0. If the index is invalid, then you shouldn't perform the deletion.
After each query you need to print the linked list.
Note: You must use singly linked list, otherwise you will not get marks.

Input Format

First line will contain Q.
Next Q lines will contain X and V.
Constraints

1 <= Q <= 1000;
0 <= X <= 2;
0 <= V <= 10^9
Output Format

For each query ouput the updated linked list.
Sample Input 0

4
0 10
1 20
1 30
0 40
Sample Output 0

10 
10 20 
10 20 30 
40 10 20 30 
Sample Input 1

11
0 10
2 5
1 20
1 30
0 40
2 0
0 50
2 2
1 60
2 3
2 3
Sample Output 1

10 
10 
10 20 
10 20 30 
40 10 20 30 
10 20 30 
50 10 20 30 
50 10 30 
50 10 30 60 
50 10 30 
50 10 30 
Sample Input 2

10
1 4
2 1
0 9
0 10
2 2
1 5
2 0
2 1
2 5
2 2
Sample Output 2

4 
4 
9 4 
10 9 4 
10 9 
10 9 5 
9 5 
9 
9 
9 

CODE:
#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    long long val;
    Node* next;
    Node(long long val) {
        this->val = val;
        this->next = NULL;
    }
};

// Insert at head
void insert_at_head(Node* &head, Node* &tail, long long val) {
    Node* newnode = new Node(val);
    if (head == NULL) { // empty list
        head = tail = newnode;
    } else {
        newnode->next = head;
        head = newnode;
    }
}

// Insert at tail
void insert_at_tail(Node* &head, Node* &tail, long long val) {
    Node* newnode = new Node(val);
    if (head == NULL) { // empty list
        head = tail = newnode;
    } else {
        tail->next = newnode;
        tail = newnode;
    }
}

// Delete at index
void delete_at_index(Node* &head, Node* &tail, long long idx) {
    if (head == NULL) return; // empty list
    if (idx == 0) { // delete head
        Node* temp = head;
        head = head->next;
        if (head == NULL) tail = NULL; // list became empty
        delete temp;
        return;
    }

    Node* temp = head;
    long long i = 0;
    while (temp != NULL && i < idx - 1) { // move to (idx-1)th node
        temp = temp->next;
        i++;
    }

    if (temp == NULL || temp->next == NULL) return; // invalid index

    Node* del = temp->next;
    temp->next = temp->next->next;
    if (temp->next == NULL) tail = temp; // deleted last node
    delete del;
}

// Print list
void print_list(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->val << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = NULL;
    Node* tail = NULL;

    int Q;
    cin >> Q;
    for (int q = 0; q < Q; q++) {
        int X;
        long long V;
        cin >> X >> V;
        if (X == 0) insert_at_head(head, tail, V);
        else if (X == 1) insert_at_tail(head, tail, V);
        else if (X == 2) delete_at_index(head, tail, V);

        print_list(head);
    }
    return 0;
}
